import itsc2214.*;
import java.io.FileNotFoundException;

/**
 * Implements Conway's Game of Life using a 2D array.
 * Provides options for random or file-based grid initialization and
 * simulates the game for a fixed number of generations.
 * Examples: https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life
 * Code generated by ChatGPT, June 4, 2025
 */
public class Project1Main {

    /**
     * Displays the current state of the grid in the console.
     * 'O' represents a live cell, and '.' represents a dead cell.
     */
    public static void display(GameOfLife game, int generation) {
        System.out.print("\033[H\033[2J");      // clear the screen (terminal window)
        System.out.flush();  // Recommended to ensure the output is sent immediately
        System.out.println("Generation " + (generation));
        int rows = game.numRows();
        int cols = game.numCols();
        for (int r = 0; r < rows; r++) {
            for (int c = 0; c < cols; c++) {
                System.out.print(game.isAlive(r,c) ? "O" : ".");
            }
            System.out.println();
        }
    }

    /**
     * Runs the Game of Life simulation for a specified number of generations.
     * Displays the grid in the console for each generation.
     *
     * @param generations The number of generations to simulate
     */
    public static void simulate(GameOfLife game, int generations) {
        for (int i = 0; i < generations; i++) {
            display(game, i+1);
            game.nextGeneration();
            System.out.println();
            // Should we Terminate early if there is nothing
            if (game.isStillLife()) {
                System.out.println("Finished early, no change.");
                return;
            }
            try {
                Thread.sleep(500); // Pause between generations
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
            }
        }
    }

    /**
     * Main method to run the Game of Life.
     * If a file is provided, it loads the initial state from the file.
     * Otherwise, it initializes a random grid and runs the simulation.
     *
     * @param args Command-line arguments: optional filename for grid input
     */
    public static void main(String[] args) 
    {
        // 5 different examples of running the game of life
        // uncomment one and let it run
        
        loadRandomly(new Project1(15,15));
        // loadFromStringExample(new Project1());
        // loadFromStringExample2(new Project1());
        // loadFromFileExample(new Project1(), "tub.txt");

        // to run this last one, go to the termial, press arrow up to
        // bring up the last execution of this program, then add to the
        // line "blinker.txt" and press return
        // if (args.length == 1) loadFromFileExample(new Project1(), args[0]);
    }

    private static void loadFromFileExample(GameOfLife game, String file)
    {
        try {
            game.loadFromFile(file);
            simulate(game, 30); // simulate 30 generations
        } catch (FileNotFoundException e) {
            System.err.println("File not found.");
        }
    }

    private static void loadFromStringExample(GameOfLife game)
    {
        game.loadFromString("3 3\n"+
            ".O.\n"+
            "OOO\n"+
            ".O.\n"
        );
        simulate(game, 30);
    }
    private static void loadFromStringExample2(GameOfLife game) {
        game.loadFromString("3 3\n"+
            ".O.\n"+
            "O.O\n"+
            ".O.\n"
        );
        simulate(game, 30);
    }

    private static void loadRandomly(GameOfLife game)
    {
        game.randomInitialize(0.5);
        simulate(game, 30);
    }
}